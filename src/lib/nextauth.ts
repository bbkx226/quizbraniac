import { PrismaAdapter } from "@next-auth/prisma-adapter";
import {
  getServerSession,
  type NextAuthOptions, // Allows creating reusable named aliases for other types
  type DefaultSession, // It avoids having to repeatedly write out the full module path like `next-auth/core/types/NextAuthOptions` every time you want to reference those types.
} from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import { prisma } from "@/lib/db";

// Module Augmentations: Allows us to extend the existing types from next-auth
declare module "next-auth" {
  interface Session extends DefaultSession { // Creates a new Session interface that extends the built-in DefaultSession interface from next-auth
    user: { // This adds a user property that extends the default user property from DefaultSession
      id: string;
      // ...other properties
      // role: UserRole;
    } & DefaultSession["user"]; // Combining the newly defined user interface with the existing user property from DefaultSession using an intersection type.
  }

  // interface User {
  //   // ...other properties
  //   // role: UserRole;
  // }
}

declare module "next-auth/jwt" { // Allows safely adding properties to external types
  interface JWT { // Anywhere the JWT type is used, it will now have the 'id' property available in addition to existing properties on the interface.
    id: string;
  }
}

// Configuring the NextAuth options to add a custom 'id' property to the JWT token and session
export const authOptions: NextAuthOptions = {
  session: { // Using JWT sessions rather than database sessions
    strategy: "jwt",
  },
  secret: process.env.NEXTAUTH_SECRET,
  callbacks: {
    jwt: async ({ token }) => { // Gets passed the token payload generated by NextAuth initially.
      // Looks up the user in the database by email from token.email.
      const db_user = await prisma.user.findFirst({
        where: {
          email: token?.email,
        },
      });
      // If a database user is found, it adds a new id property to the token, setting it to the database user's id.
      if (db_user) {
        token.id = db_user.id;
      }
      return token;
    },
    session: ({ session, token }) => { // Gets passed the token from the JWT callback and the default session object.
      // If a token exists, it copies the custom id and other properties to the session.user.
      if (token) {
        session.user.id = token.id;
        session.user.name = token.name;
        session.user.email = token.email;
        session.user.image = token.picture;
      }
      return session;
    },
  },
  adapter: PrismaAdapter(prisma), // use Prisma to query the database for users and sessions.
  providers: [
    GoogleProvider({ // Specifies the authentication providers to support.
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    }),
  ],
};

export const getAuthSession = () => { // Retrieving the session for the current user using NextAuth.js.
  return getServerSession(authOptions); // `getServerSession()` get the session on the server side
  // This will get the active session if a user is logged in; Or null if no user is logged in.
};